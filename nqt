/******************************************************************************
Abundant and Harshad number problem
*******************************************************************************/

public class Main
{
    public static int factorial( int n ){
        int sum=0;
        for(int i = 1; i <=n/2; i++){
            if(n%i == 0){
                sum+=i;
            }
        }
        return sum;
    }
	public static void main(String[] args) {
		System.out.println("Abundant and Harshad number problem ");
		int sum1=0, org = 1662,n, fact;
		n = org;
		while(org != 0 ){
		    sum1 += org%10;
		    org = org/10;
		}
		 fact = factorial(n);
		String result = (fact>n)? "Abundant number" : "Not Abundant number";
		String result2 = ((n%sum1)==0)? "Harshad number" : "Not Harshad number";
		System.out.println(result);
		System.out.println(result2);

	}
}
/******************************************************************************
FRIENDLY PAIR PROBLEM
*******************************************************************************/

public class Main
{
    public static int factor( int n ){
        int sum=0;
        for(int i = 1; i <=n/2; i++){
            if(n%i == 0){
                sum+=i;
            }
        }
        return sum;
    }
	public static void main(String[] args) {
		System.out.println("friendly pair problem ");
        int n=5020 , m=5564, fact1, fact2; 		
        fact1 = factor(n);
        fact2 = factor(m);
		String result = ((fact1==m)&&(fact2==n))? "friendly pair " : "Not a friendly pair ";
		System.out.println(result);

	}
}
/*********************************************************/
BINARY CONVERSION
/*********************************************************/

import java.util.*;
import java.lang.*;
public class Main
{
  public static int conversion (int a)
  {
    int sum = 0, dec, i = 0;
    while (a > 0)
      {
	if (a % 10 > 1)
	  return 0;
	sum += (a % 10) * Math.pow (2, i);
	a = a / 10;
	i++;
      }
    return sum;
  }
  public static void main (String[]args)
  {
    System.out.println ("Binary to decimal conversion");
    Scanner sc = new Scanner (System.in);
    int n = sc.nextInt ();
    int r = conversion (n);
    System.out.println (r);
  }
}
/*********************************************************/
quadrant in which the given co-ordinate lie
/*********************************************************/

 public static int conversion (int a, int b)
  {
        if(a>0 && b>0)
        return 1;
        else if (a<0 && b >0)
        return 2;
        else if (a<0 && b<0)
        return 3;
        else return 4;
  }
  /*********************************************************/
  Permutations in which n people can occupy r seats in a classroom in java
  /*********************************************************/

public class Main
{
    public static int factorial(int a){
        int fact = 1;
       while (a>0){
            fact *= a--;
        }
        return fact;
    }
  public static int Calculate_Ways(int a, int b)
  {
      int NoOfWays=0;
    
      NoOfWays = factorial(a)/factorial(a-b);
       return NoOfWays;
  }
  public static void main (String[]args)    
  {
    System.out.println ("Permutations in which n people can occupy r seats in a classroom in java\n");
 
    int r = Calculate_Ways(5,2);
    System.out.println (r);
  }
}

/******************************************************************************

                          BINARY REPRESENTATION USING STACK

*******************************************************************************/
import java.util.*;
public class Main
{
    static void  bin(int n){
        Stack s = new Stack();
        while (n!=0){
            s.push(n%2);
            n = n/2;   
        }
        while(s.empty() != true)
        System.out.print(s.pop());
    }
	public static void main(String[] args) {
		System.out.println("Hello World");
		bin(7);
	}
}

  /*********************************************************/
  /******************************************************************************

                            REVERSING A String USING STACK

*******************************************************************************/
import java.util.*;
public class Main
{
    static void  bin(String n){
        Stack s = new Stack();
        for(int  i = 0; i < n.length(); i++){
            s.push(n.charAt(i));
        }
        while(s.empty() != true){
        System.out.print(s.peek());
           s.pop();
        }
    }
	public static void main(String[] args) {
		System.out.println("Hello World");
		bin("pragati");
	}
}

  /*********************************************************/
  /***************************************************************************
  			QUEUE IMPLEMENTATION  WITHOUT COLLECTIONS
*******************************************************************************/
import java.util.*;
class Queues{
    int front, rear;
    int capacity;
    int[] arr;
    Queues(int n){
        capacity = n;
          front = -1;
          rear = -1;
        arr = new int[capacity];
    }
    boolean isFull(){
        if(rear == capacity-1)
        System.out.println("queue Overflow!!");
        return (rear == capacity-1);
    }
    boolean isEmpty(){
        if (front == -1 )
        System.out.println("queue Underflow!!");
        return (front ==-1);
    }
    void enqueue(int n){
        if(isFull()==false){
            if(front == -1)
            front = 0;
            rear++;
            arr[rear] = n;
        System.out.println(n+" Added to Queue");
        }
        
    }
    void  dequeue(){
        if(isEmpty()==false){
            int item = arr[front];
            front++;
        System.out.println(item+" Deleted from the queue");

        }

        
    if(front>rear)
    front = rear = -1;
    }
    int Front(){
        if(isEmpty () )
        return Integer.MIN_VALUE;
        
        return arr[front];
    }
    int Rear(){
         if(isEmpty() )
        return Integer.MIN_VALUE;
        
        return arr[rear];
    }
}

public class Main
{
	public static void main(String[] args) {
		System.out.println("Hello World");
		Queues q = new Queues(5);
		q.enqueue(20);
		q.enqueue(90);
		q.enqueue(80);
		q.enqueue(60);
		q.dequeue();
		q.dequeue();
		q.enqueue(20);
		q.enqueue(90);
	System.out.println("Rear : "+q.Rear()+" \nFront : "+q.Front());

	}
}

  /******************************************************************************                         
Output :
TW =130 FW=70

Explanation:
130+70 = 200 vehicles
(70*4)+(130*2)= 540 wheels

Constraints :
2<=W
W%2=0
V<W

Print “INVALID INPUT” , if inputs did not meet the constraints.
The candidate has to write the code to accept two positive numbers separated by a new line.
*******************************************************************************/
import java.util.*;

public class Main
{
	public static void main(String[] args) {
	    Scanner sc = new Scanner(System.in);
	    int w = sc.nextInt();
	    int v = sc.nextInt();
	    float x;
	    x = (w - (2*v))/2;
	    if((w<2)||(w%2!=0)||(v>w) )
	    System.out.println("Invalid output");
	    else{
 		System.out.println((int)x);
 		System.out.println((int)(v-x));}

	}
}

  /******************************************************************************              
(*>#): positive integer
(#>*): negative integer
(#=*): 0

Example 1:
Input 1:
###***   -> Value of S

*******************************************************************************/
import java.util.*;

public class Main
{
	public static void main(String[] args) {
	    Scanner sc = new Scanner(System.in);
	    String s1 = sc.next();
	    int star = 0, hash = 0;
	  for(int i=0; i< s1.length(); i++){
	      if(s1.charAt(i) == '*')
	      star++;
	      else 
	      hash++;
	  }
		System.out.println((star-hash));
	}
}

  /******************************************************************************
  Converting a matrix in a square matrix and finding the sum of diagonals 
*******************************************************************************/
class matrix
{
  void func (int[][]a, int m, int n)
  {
    int diff = 0;
    int[][] array;
      diff = m - n; 
      if(diff!=0)
   { if (diff > 0) // if true means coloum is lesser than row ,so the elements (1) are to be added in the coloum
      {
	array = new int[m][n + diff];
	for (int i = 0; i < m; i++)
	  {
	    for (int j = 0; j < n + diff; j++)
	      {
		if (j < a[0].length)
		  {
		    array[i][j] = a[i][j];
		    System.out.print (array[i][j] + " ");
		  }
		else
		  {
		    array[i][j] = 1;
		    System.out.print (array[i][j] + " ");

		  }
	      }
	  }

      }
    else  //means row is lesser than col ,so the elements (1) are to be added in the rows
      {
	diff = diff * (-1);
	array = new int[m + diff][n];
	for (int i = 0; i < m + diff; i++)
	  {
	    for (int j = 0; j < n; j++)
	      {
		if (i < a.length)
		  {
		    array[i][j] = a[i][j];
		    System.out.print (array[i][j] + " ");
		  }
		else
		  {
		    array[i][j] = 1;
		    System.out.print (array[i][j] + " ");

		  }
	      }
	  }
      }
       sumOfdiagonals(array);
   }else
          sumOfdiagonals(a);

  }
  //function for calculating diagonal sum
  void sumOfdiagonals(int[][]a){
      int s1=0,s2=0,sum=0;
      for(int i = 0 , j = a[0].length-1; j >= 0 && i<a.length; i++, j--){
              s1 +=a[i][j];
              s2 +=a[i][i];
      }
      sum = s1+s2;
      System.out.println(sum);
  }
  }
  public class Main
  {
    public static void main (String[]args)
    {
      System.out.println ("Hello World");
      matrix m = new matrix ();
      int[][] a = { {1, 2, 3, 4}, {1, 2, 3, 4}, {1, 2, 3, 4} };
      int row = 3, col = 4;
      m.func (a, row, col);
    }
  }

  /*********************************************************/
  Array rotation very simple no swap or interchanging is required simply print it in the order of rotation;
  if k > n then k%n is taken ;
  /*********************************************************/
  Scanner s = new Scanner(System.in);
         int t = s.nextInt();
        
         for(int i = 0; i < t; i++){
            int n = s.nextInt();
           int[] arr = new int[n]; 
          int   k = s.nextInt();
            for(int j = 0; j<n; j++){
               arr[j] = s.nextInt();
            }
            
            //rotating 
            for(int a = n-k ; a<n; a++){
                System.out.print(arr[a]+" ");
            }
            for(int a = 0; a<n-k ; a++){
                System.out.print(arr[a]+" ");
            }
           
        }

  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
  /*********************************************************/
